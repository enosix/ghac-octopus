name: Test and Tag
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag Name'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'stable'

permissions:
  contents: write
  packages: read

env:
  TEST_VERSION: 0.0.0.1-fake-test
  OCTOPUS_PROJECT_ID: Projects-42
  OCTOPUS_SERVER: https://enosix.octopus.app
  OCTOPUS_SPACE: Enosix

jobs:
  test-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Get Secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BW_ACCESS_TOKEN }}
          secrets: |
            7ee5dfd9-0e5f-4bfe-aed3-b185011624aa > OCTOPUS_API_KEY
      - uses: actions/checkout@v4
      - name: Test Action
        uses: ./
        with:
          octopus_server: ${{ env.OCTOPUS_SERVER }}
          octopus_api_key: ${{ env.OCTOPUS_API_KEY }}
          octopus_space: ${{ env.OCTOPUS_SPACE }}
          package_id: Surface.App
          project_id: Surface
          version: ${{ env.TEST_VERSION }}
          environment: "Scratch Org"
          path: './test'
      - name: Clean up octopus package
        run: |
          RELEASE_ID=$(curl -H "X-Octopus-ApiKey: ${{ env.OCTOPUS_API_KEY }}" ${{ env.OCTOPUS_SERVER }}/api/projects/${{ env.OCTOPUS_PROJECT_ID }}/releases | jq -r '.Items[] | select(.Version == "${{ env.TEST_VERSION }}") | .Id')
          echo "Release ID: $RELEASE_ID"
          curl -X DELETE -H "X-Octopus-ApiKey: ${{ env.OCTOPUS_API_KEY }}" ${{ env.OCTOPUS_SERVER }}/api/releases/$RELEASE_ID
          curl -X DELETE -H "X-Octopus-ApiKey: ${{ env.OCTOPUS_API_KEY }}" ${{ env.OCTOPUS_SERVER }}/api/packages/packages-Surface.App.${{ env.TEST_VERSION }}

      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ github.event.inputs.tag }}',
                sha: context.sha,
              })
            } catch (err) {
              console.log(err)
            
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ github.event.inputs.tag }}',
                sha: context.sha,
              })
            }
